diff --git a/Common/cpp/NativeModules/NativeReanimatedModule.h b/Common/cpp/NativeModules/NativeReanimatedModule.h
index d15f196ebbb299ea8558d4c5c84ef24a39562211..fea96a916e6bb02516037ab9a2ba862050db293f 100644
--- a/Common/cpp/NativeModules/NativeReanimatedModule.h
+++ b/Common/cpp/NativeModules/NativeReanimatedModule.h
@@ -194,7 +194,7 @@ class NativeReanimatedModule : public NativeReanimatedModuleSpec,
   KeyboardEventUnsubscribeFunction unsubscribeFromKeyboardEventsFunction;
 
 #ifdef DEBUG
-  SingleInstanceChecker<NativeReanimatedModule> singleInstanceChecker_;
+  // SingleInstanceChecker<NativeReanimatedModule> singleInstanceChecker_;
 #endif
 };
 
diff --git a/ios/LayoutReanimation/REAAnimationsManager.h b/ios/LayoutReanimation/REAAnimationsManager.h
index 5ef6b3a310d15a94575e4dd74d71935647a71f12..41004e10399bd7f404ae810b32e938f5f5a8c079 100644
--- a/ios/LayoutReanimation/REAAnimationsManager.h
+++ b/ios/LayoutReanimation/REAAnimationsManager.h
@@ -28,6 +28,7 @@ typedef void (^REAAnimationRemovingBlock)(NSNumber *_Nonnull tag);
 - (void)setAnimationRemovingBlock:(REAAnimationRemovingBlock)clearAnimation;
 - (void)progressLayoutAnimationWithStyle:(NSDictionary *_Nonnull)newStyle forTag:(NSNumber *_Nonnull)tag;
 - (void)endLayoutAnimationForTag:(NSNumber *_Nonnull)tag cancelled:(BOOL)cancelled removeView:(BOOL)removeView;
+- (void)endAnimationsRecursive:(UIView *)view;
 - (void)invalidate;
 - (void)viewDidMount:(UIView *)view withBeforeSnapshot:(REASnapshot *)snapshot;
 - (REASnapshot *)prepareSnapshotBeforeMountForView:(UIView *)view;
diff --git a/ios/LayoutReanimation/REAAnimationsManager.m b/ios/LayoutReanimation/REAAnimationsManager.m
index d791aeb673903374c416b3f7f232339c70f794b5..a6fa02b89671f0083ec9dab4179b7a2ebb672d4c 100644
--- a/ios/LayoutReanimation/REAAnimationsManager.m
+++ b/ios/LayoutReanimation/REAAnimationsManager.m
@@ -33,6 +33,7 @@ @implementation REAAnimationsManager {
   NSMutableDictionary<NSNumber *, REASnapshot *> *_enteringViewTargetValues;
   NSMutableDictionary<NSNumber *, UIView *> *_exitingViews;
   NSMutableDictionary<NSNumber *, NSNumber *> *_exitingSubviewsCountMap;
+  NSMutableDictionary<NSNumber *, NSNumber *> *_exitingParentTags;
   NSMutableSet<NSNumber *> *_ancestorsToRemove;
   NSMutableArray<NSString *> *_targetKeys;
   NSMutableArray<NSString *> *_currentKeys;
@@ -59,6 +60,7 @@ - (instancetype)initWithUIManager:(RCTUIManager *)uiManager
     _exitingViews = [NSMutableDictionary new];
     _exitingSubviewsCountMap = [NSMutableDictionary new];
     _ancestorsToRemove = [NSMutableSet new];
+    _exitingParentTags = [NSMutableDictionary new];
     _enteringViews = [NSMutableSet new];
     _enteringViewTargetValues = [NSMutableDictionary new];
 
@@ -273,11 +275,22 @@ - (void)registerExitingAncestors:(UIView *)child
 
 - (void)registerExitingAncestors:(UIView *)child exitingSubviewsCount:(int)exitingSubviewsCount
 {
+  NSNumber *childTag = child.reactTag;
   UIView *parent = child.superview;
-  while (parent != nil && ![parent isKindOfClass:[RCTRootView class]]) {
-    if (parent.reactTag != nil) {
+  
+  UIViewController *childController = child.reactViewController;
+
+  // only register ancestors whose `reactViewController` is the same as `child`'s.
+  // The idea is that, if a whole ViewController is unmounted, we won't want to run
+  // the exiting animation since all the views will disappear immediately anyway
+  while (parent != nil && parent.reactViewController == childController &&
+         ![parent isKindOfClass:[RCTRootView class]]) {
+    NSNumber *parentTag = parent.reactTag;
+    if (parentTag != nil) {
       _exitingSubviewsCountMap[parent.reactTag] =
           @([_exitingSubviewsCountMap[parent.reactTag] intValue] + exitingSubviewsCount);
+      _exitingParentTags[childTag] = parentTag;
+      childTag = parentTag;
     }
     parent = parent.superview;
   }
@@ -286,12 +299,37 @@ - (void)registerExitingAncestors:(UIView *)child exitingSubviewsCount:(int)exiti
 - (void)maybeDropAncestors:(UIView *)child
 {
   UIView *parent = child.superview;
-  while (parent != nil && ![parent isKindOfClass:[RCTRootView class]]) {
+  NSNumber *parentTag = _exitingParentTags[child.reactTag];
+  [_exitingParentTags removeObjectForKey:child.reactTag];
+
+  while ((parent != nil || parentTag != nil) && ![parent isKindOfClass:[RCTRootView class]]) {
     UIView *view = parent;
+    NSNumber *viewTag = parentTag;
+    parentTag = _exitingParentTags[viewTag];
+    UIView *viewByTag = [self viewForTag:viewTag];
     parent = view.superview;
+
+    if (view == nil) {
+      if (viewByTag == nil) {
+        // the view was already removed from both native and RN hierarchies
+        // we can safely forget that it had any animated children
+        [_ancestorsToRemove removeObject:viewTag];
+        [_exitingSubviewsCountMap removeObjectForKey:viewTag];
+        [_exitingParentTags removeObjectForKey:viewTag];
+        continue;
+      }
+      // the child was dettached from view, but view is still
+      // in the native and RN hierarchy
+      view = viewByTag;
+    }
+
     if (view.reactTag == nil) {
+      // we skip over views with no tag when registering parent tags,
+      // so we shouldn't go to the parent of viewTag yet
+      parentTag = viewTag;
       continue;
     }
+
     int trackingCount = [_exitingSubviewsCountMap[view.reactTag] intValue] - 1;
     if (trackingCount <= 0) {
       if ([_ancestorsToRemove containsObject:view.reactTag]) {
@@ -301,6 +339,7 @@ - (void)maybeDropAncestors:(UIView *)child
         }
       }
       [_exitingSubviewsCountMap removeObjectForKey:view.reactTag];
+      [_exitingParentTags removeObjectForKey:view.reactTag];
     } else {
       _exitingSubviewsCountMap[view.reactTag] = @(trackingCount);
     }
@@ -313,6 +352,19 @@ - (BOOL)startAnimationsRecursive:(UIView *)view
   if (!view.reactTag) {
     return NO;
   }
+
+  UIViewController *viewController = view.reactViewController;
+
+  // `startAnimationsRecursive:shouldRemoveSubviewsWithoutAnimations:`
+  // is called on a detached view tree, so the `viewController` should be `nil`.
+  // If it's not, we're descending into another `UIViewController`.
+  // We don't want to run animations inside it (since it causes issues with RNScreens),
+  // so instead clean up the subtree and return `NO`.
+  if (viewController != nil) {
+    [self removeAnimationsFromSubtree:view];
+    return NO;
+  }
+
   BOOL hasExitAnimation = _hasAnimationForTag(view.reactTag, @"exiting") || [_exitingViews objectForKey:view.reactTag];
   BOOL hasAnimatedChildren = NO;
   shouldRemoveSubviewsWithoutAnimations = shouldRemoveSubviewsWithoutAnimations && !hasExitAnimation;
diff --git a/ios/LayoutReanimation/REAUIManager.mm b/ios/LayoutReanimation/REAUIManager.mm
index 47dfda2aa4cd2d7d9a9495295f38f189ad3fdb9a..e5385a4d286a296c3e190fbc8e6116440619d054 100644
--- a/ios/LayoutReanimation/REAUIManager.mm
+++ b/ios/LayoutReanimation/REAUIManager.mm
@@ -76,9 +76,28 @@ - (void)_manageChildren:(NSNumber *)containerTag
   bool isLayoutAnimationEnabled = reanimated::FeaturesConfig::isLayoutAnimationEnabled();
   id<RCTComponent> container;
   NSArray<id<RCTComponent>> *permanentlyRemovedChildren;
+  BOOL containerIsRootOfViewController = NO;
   if (isLayoutAnimationEnabled) {
     container = registry[containerTag];
     permanentlyRemovedChildren = [self _childrenToRemoveFromContainer:container atIndices:removeAtIndices];
+    
+    if ([container isKindOfClass:[UIView class]]) {
+      UIViewController *controller = ((UIView *)container).reactViewController;
+      UIViewController *parentController = ((UIView *)container).superview.reactViewController;
+      containerIsRootOfViewController = controller != parentController;
+    }
+
+    // we check if the container we`re removing from is a root view
+    // of some view controller. In that case, we skip running exiting animations
+    // in its children, to prevent issues with RN Screens.
+    if (containerIsRootOfViewController) {
+      NSArray<id<RCTComponent>> *permanentlyRemovedChildren = [self _childrenToRemoveFromContainer:container
+                                                                                         atIndices:removeAtIndices];
+      for (UIView *view in permanentlyRemovedChildren) {
+        [_animationsManager endAnimationsRecursive:view];
+      }
+      [_animationsManager removeAnimationsFromSubtree:(UIView *)container];
+    }
   }
 
   [super _manageChildren:containerTag
@@ -89,21 +108,27 @@ - (void)_manageChildren:(NSNumber *)containerTag
          removeAtIndices:removeAtIndices
                 registry:registry];
 
-  if (isLayoutAnimationEnabled) {
-    // we sort the (index, view) pairs to make sure we insert views back in order
-    NSMutableArray<NSArray<id> *> *removedViewsWithIndices = [NSMutableArray new];
-    for (int i = 0; i < removeAtIndices.count; i++) {
-      removedViewsWithIndices[i] = @[ removeAtIndices[i], permanentlyRemovedChildren[i] ];
-    }
-    [removedViewsWithIndices
-        sortUsingComparator:^NSComparisonResult(NSArray<id> *_Nonnull obj1, NSArray<id> *_Nonnull obj2) {
-          return [(NSNumber *)obj1[0] compare:(NSNumber *)obj2[0]];
-        }];
-
-    [_animationsManager reattachAnimatedChildren:permanentlyRemovedChildren
-                                     toContainer:container
-                                       atIndices:removeAtIndices];
+  if (!isLayoutAnimationEnabled) {
+    return;
+  }
+
+  if (containerIsRootOfViewController) {
+    return;
+  }
+
+  // we sort the (index, view) pairs to make sure we insert views back in order
+  NSMutableArray<NSArray<id> *> *removedViewsWithIndices = [NSMutableArray new];
+  for (int i = 0; i < removeAtIndices.count; i++) {
+    removedViewsWithIndices[i] = @[ removeAtIndices[i], permanentlyRemovedChildren[i] ];
   }
+  [removedViewsWithIndices
+      sortUsingComparator:^NSComparisonResult(NSArray<id> *_Nonnull obj1, NSArray<id> *_Nonnull obj2) {
+        return [(NSNumber *)obj1[0] compare:(NSNumber *)obj2[0]];
+      }];
+
+  [_animationsManager reattachAnimatedChildren:permanentlyRemovedChildren
+                                   toContainer:container
+                                     atIndices:removeAtIndices];
 }
 
 - (void)callAnimationForTree:(UIView *)view parentTag:(NSNumber *)parentTag
diff --git a/ios/REAModule.mm b/ios/REAModule.mm
index 3cb75a0b8cf0a33d7a3c707ab5b343b3b5f89ff0..416463cc62d7a2b822cec95845bf4d7eaf3998f2 100644
--- a/ios/REAModule.mm
+++ b/ios/REAModule.mm
@@ -49,7 +49,7 @@ @implementation REAModule {
   NSMutableArray<AnimatedOperation> *_operations;
 #endif
 #ifdef DEBUG
-  SingleInstanceChecker<REAModule> singleInstanceChecker_;
+  // SingleInstanceChecker<REAModule> singleInstanceChecker_;
 #endif
   bool hasListeners;
 }
